Since this LISP interpreter is implemented in Python, there is no need for a Makefile.

Parsing:
-------
A simple lexer splits the input into tokens. Regular expressions for identifying valid
atoms, integers, and whitespace make tokenizing very easy. Then two input functions
(essentially input and input2, as described by Neelam on the cse.courses.cse755 newsgroup)
recursively parse the list of tokens, in one pass, building an S-Expression.

The two input functions recursively call each other to allow both dot and list notation
(but not mixed notation).


S-Expression implementation:
---------------------------
Conceptually, S-Expressions are represented using two of Python's basic data structures:
lists and strings. A simple S-expression is basically a list with one string; complex
S-expressions are binary trees with simple S-expressions at their leaves.

The implementation uses a class that provides all the primitive functions (such as car,
cdr, cons) and some utility functions.


LISP interpreter
----------------
The main interpreter functions are translated from LISP to Python almost identically.
They do include some extra calls to utilities for error checking, such as verifying that
functions and special forms are called with the correct number of arguments.


Interactive toplevel
--------------------
For ease of use, some color is added to the input and output by using extended ASCII
characters.

In interactive mode, input may span multiple lines. The whole expression gets evaluated
once the parentheses match, or once they clearly cannot match.


TODO:
----
-Parsing negative integers is not as elegent as it could be.
-Implement the interactive toplevel using curses to allow more robust editing techniques.
 (multiline navigation, reverse incremental search, in-place editing, dumping history
 to file, etc.)
-Don't rely on Python for recursion: it only supports up to 1000 recursive calls, and
 has no support for tail recursion. Instead, use my own stack and implement tail
 recursion.
-Find a more elegent way to represent primitives, rather than just instantiating them
 from hard-coded strings.
